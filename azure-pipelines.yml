# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
- group: wiz-variable-group

pool:
  vmImage: ubuntu-latest

steps:
- task: JavaToolInstaller@1
  inputs:
    versionSpec: '21'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'

- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean install'
    publishJUnitResults: false
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false

- task: Docker@2
  inputs:
    command: 'build'
    repository: 'webgoat'
    Dockerfile: '**/Dockerfile'
    tags: $(Build.BuildId)

- script: |
    docker images
  displayName: Validate Docker Image

# - task: wiz@0
#   inputs:
#     command: 'image'
#     clientid: $(WIZ_CLIENT_ID)
#     secret: $(WIZ_CLIENT_SECRET)
#     succeedOnFailures: false
#     policyHitsOnly: true
#     # scanTags: 'node'
#     # image: 'node:22'
#     scanTags: 'cicd=ado,webgoat'
#     image: webgoat:$(Build.BuildId)
#     # scanPolicies: 'vuln-one-critical, vuln-two-high'
#     output: '$(System.DefaultWorkingDirectory)/wiz-output.json,json'
#     scanSecrets: false
#     sensitiveData: true
#     driver: 'mountWithLayers'
#     sudo: true
#   # continueOnError: true

# - task: PublishPipelineArtifact@1
#   inputs:
#     targetPath: '$(System.DefaultWorkingDirectory)/wiz-output.json'
#     artifact: 'security-tools'
#     publishLocation: 'pipeline'

- task: Docker@2
  inputs:
    containerRegistry: 'Docker Hub'
    command: 'login'

- task: Docker@2
  inputs:
    containerRegistry: 'Docker Hub'
    command: 'push'
    repository: 'webgoat'
    tags: $(Build.BuildId)

- task: wiz@0
  inputs:
    command: 'tag'
    clientid: $(WIZ_CLIENT_ID)
    secret: $(WIZ_CLIENT_SECRET)
    image: webgoat:$(Build.BuildId)
  continueOnError: true
