# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
- group: wiz-variable-group

pool:
  vmImage: ubuntu-latest

steps:

- task: JavaToolInstaller@1
  inputs:
    versionSpec: '21'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'

- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean install'
    publishJUnitResults: false
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false
    
- task: Docker@2
  inputs:
    command: 'build'
    Dockerfile: '**/Dockerfile'
    repository: 'webgoat'
    tags: $(Build.BuildId)

- script: |
    docker images
  displayName: Validate Docker Image

- task: wiz@0
  inputs:
    command: 'image'
    clientid: $(WIZ_CLIENT_ID)
    secret: $(WIZ_CLIENT_SECRET)
    succeedOnFailures: false
    policyHitsOnly: true
    # scanTags: 'node'
    # image: 'node:22'
    scanTags: 'cicd=ado,webgoat'
    image: webgoat:$(Build.BuildId)
    # scanPolicies: 'vuln-one-critical, vuln-two-high'
    scanSecrets: false
    sensitiveData: true
    driver: 'mountWithLayers'
    sudo: true
  continueOnError: true

- task: wiz@0
  inputs:
    command: 'tag'
    clientid: $(WIZ_CLIENT_ID)
    secret: $(WIZ_CLIENT_SECRET)
    image: webgoat:$(Build.BuildId)
  continueOnError: true

- task: trivy@1
  displayName: Trivy - Scan the local project
  inputs:
    version: 
    debug: true
    path: '.'

- task: trivy@1
  displayName: Trivy - Scan the build image
  inputs:
    image: webgoat:$(Build.BuildId)